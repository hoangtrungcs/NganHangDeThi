//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Model.POCO
{
    using System.Runtime.Serialization;
    using System;
    using System.Collections.Generic;
    
    [DataContract]
    public partial class MultiTest : BaseEntity
    {
        public MultiTest()
        {
            this.MultiTestCopies = new List<MultiTestCopy>();
            this.MultiTestQuestions = new List<MultiTestQuestion>();
            this.SubjectsMultiTests = new List<SubjectsMultiTest>();
        }
    
    	private long m_MultiTestId;
    	private string m_MultiTestNo;
    	private string m_MultiTestName;
    	private System.DateTime m_MultiTestDate;
    	private int m_Time;
    	private string m_CreatedBy;
    	private string m_UpdatedBy;
    	private System.DateTime m_CreatedDate;
    	private System.DateTime m_UpdatedDate;
    	private int m_Purpose;
    	private int m_CopyTestNo;
    	private int m_TotalQuestions;
    	private bool m_IsMixedTest;
    	private bool m_IsDeleted;
    	private Nullable<int> m_FK_ClassId;
        public long MultiTestId {
    		get{ 
    			return m_MultiTestId;
    		} 
    		set{ 
    			if(m_MultiTestId != value){
    				m_MultiTestId = value; 
    				NotifyPropertyChanged("MultiTestId"); 
                }
    		} 
    	}
    	[DataMember]
        public string MultiTestNo {
    		get{ 
    			return m_MultiTestNo;
    		} 
    		set{ 
    			if(m_MultiTestNo != value){
    				m_MultiTestNo = value; 
    				NotifyPropertyChanged("MultiTestNo"); 
                }
    		} 
    	}
    	[DataMember]
        public string MultiTestName {
    		get{ 
    			return m_MultiTestName;
    		} 
    		set{ 
    			if(m_MultiTestName != value){
    				m_MultiTestName = value; 
    				NotifyPropertyChanged("MultiTestName"); 
                }
    		} 
    	}
    	[DataMember]
        public System.DateTime MultiTestDate {
    		get{ 
    			return m_MultiTestDate;
    		} 
    		set{ 
    			if(m_MultiTestDate != value){
    				m_MultiTestDate = value; 
    				NotifyPropertyChanged("MultiTestDate"); 
                }
    		} 
    	}
    	[DataMember]
        public int Time {
    		get{ 
    			return m_Time;
    		} 
    		set{ 
    			if(m_Time != value){
    				m_Time = value; 
    				NotifyPropertyChanged("Time"); 
                }
    		} 
    	}
    	[DataMember]
        public string CreatedBy {
    		get{ 
    			return m_CreatedBy;
    		} 
    		set{ 
    			if(m_CreatedBy != value){
    				m_CreatedBy = value; 
    				NotifyPropertyChanged("CreatedBy"); 
                }
    		} 
    	}
    	[DataMember]
        public string UpdatedBy {
    		get{ 
    			return m_UpdatedBy;
    		} 
    		set{ 
    			if(m_UpdatedBy != value){
    				m_UpdatedBy = value; 
    				NotifyPropertyChanged("UpdatedBy"); 
                }
    		} 
    	}
    	[DataMember]
        public System.DateTime CreatedDate {
    		get{ 
    			return m_CreatedDate;
    		} 
    		set{ 
    			if(m_CreatedDate != value){
    				m_CreatedDate = value; 
    				NotifyPropertyChanged("CreatedDate"); 
                }
    		} 
    	}
    	[DataMember]
        public System.DateTime UpdatedDate {
    		get{ 
    			return m_UpdatedDate;
    		} 
    		set{ 
    			if(m_UpdatedDate != value){
    				m_UpdatedDate = value; 
    				NotifyPropertyChanged("UpdatedDate"); 
                }
    		} 
    	}
    	[DataMember]
        public int Purpose {
    		get{ 
    			return m_Purpose;
    		} 
    		set{ 
    			if(m_Purpose != value){
    				m_Purpose = value; 
    				NotifyPropertyChanged("Purpose"); 
                }
    		} 
    	}
    	[DataMember]
        public int CopyTestNo {
    		get{ 
    			return m_CopyTestNo;
    		} 
    		set{ 
    			if(m_CopyTestNo != value){
    				m_CopyTestNo = value; 
    				NotifyPropertyChanged("CopyTestNo"); 
                }
    		} 
    	}
    	[DataMember]
        public int TotalQuestions {
    		get{ 
    			return m_TotalQuestions;
    		} 
    		set{ 
    			if(m_TotalQuestions != value){
    				m_TotalQuestions = value; 
    				NotifyPropertyChanged("TotalQuestions"); 
                }
    		} 
    	}
    	[DataMember]
        public bool IsMixedTest {
    		get{ 
    			return m_IsMixedTest;
    		} 
    		set{ 
    			if(m_IsMixedTest != value){
    				m_IsMixedTest = value; 
    				NotifyPropertyChanged("IsMixedTest"); 
                }
    		} 
    	}
    	[DataMember]
        public bool IsDeleted {
    		get{ 
    			return m_IsDeleted;
    		} 
    		set{ 
    			if(m_IsDeleted != value){
    				m_IsDeleted = value; 
    				NotifyPropertyChanged("IsDeleted"); 
                }
    		} 
    	}
    	[DataMember]
        public Nullable<int> FK_ClassId {
    		get{ 
    			return m_FK_ClassId;
    		} 
    		set{ 
    			if(m_FK_ClassId != value){
    				m_FK_ClassId = value; 
    				NotifyPropertyChanged("FK_ClassId"); 
                }
    		} 
    	}
    
    	protected override void CopyFromEntity(BaseEntity source, BaseEntity dest){
    		((MultiTest)dest).MultiTestId = ((MultiTest)source).MultiTestId;
    		((MultiTest)dest).MultiTestNo = ((MultiTest)source).MultiTestNo;
    		((MultiTest)dest).MultiTestName = ((MultiTest)source).MultiTestName;
    		((MultiTest)dest).MultiTestDate = ((MultiTest)source).MultiTestDate;
    		((MultiTest)dest).Time = ((MultiTest)source).Time;
    		((MultiTest)dest).CreatedBy = ((MultiTest)source).CreatedBy;
    		((MultiTest)dest).UpdatedBy = ((MultiTest)source).UpdatedBy;
    		((MultiTest)dest).CreatedDate = ((MultiTest)source).CreatedDate;
    		((MultiTest)dest).UpdatedDate = ((MultiTest)source).UpdatedDate;
    		((MultiTest)dest).Purpose = ((MultiTest)source).Purpose;
    		((MultiTest)dest).CopyTestNo = ((MultiTest)source).CopyTestNo;
    		((MultiTest)dest).TotalQuestions = ((MultiTest)source).TotalQuestions;
    		((MultiTest)dest).IsMixedTest = ((MultiTest)source).IsMixedTest;
    		((MultiTest)dest).IsDeleted = ((MultiTest)source).IsDeleted;
    		((MultiTest)dest).FK_ClassId = ((MultiTest)source).FK_ClassId;
    	}
    
    
        public virtual LopHoc LopHoc { get; set; }
        public virtual IList<MultiTestCopy> MultiTestCopies { get; set; }
        public virtual IList<MultiTestQuestion> MultiTestQuestions { get; set; }
        public virtual IList<SubjectsMultiTest> SubjectsMultiTests { get; set; }
    }
}
