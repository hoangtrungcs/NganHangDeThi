//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Model.POCO
{
    using System.Runtime.Serialization;
    using System;
    using System.Collections.Generic;
    
    [DataContract]
    public partial class SubjectsClass : BaseEntity
    {
        public SubjectsClass()
        {
            this.Students = new HashSet<Student>();
        }
    
    	private int m_SubjectsClassId;
    	private string m_SubjectsClassNo;
    	private string m_SubjectsClassName;
    	private System.DateTime m_FromDate;
    	private System.DateTime m_ToDate;
    	private int m_FK_TeacherIdMain;
    	private int m_FK_TeacherIdSubject;
    	private string m_Partner;
    	private int m_ContractValue;
    	private int m_FK_SubjectId;
    	private bool m_IsDelete;
    	private bool m_OpenOut;
    	private int m_FK_DepartmentId;
        public int SubjectsClassId {
    		get{ 
    			return m_SubjectsClassId;
    		} 
    		set{ 
    			if(m_SubjectsClassId != value){
    				m_SubjectsClassId = value; 
    				NotifyPropertyChanged("SubjectsClassId"); 
                }
    		} 
    	}
    	[DataMember]
        public string SubjectsClassNo {
    		get{ 
    			return m_SubjectsClassNo;
    		} 
    		set{ 
    			if(m_SubjectsClassNo != value){
    				m_SubjectsClassNo = value; 
    				NotifyPropertyChanged("SubjectsClassNo"); 
                }
    		} 
    	}
    	[DataMember]
        public string SubjectsClassName {
    		get{ 
    			return m_SubjectsClassName;
    		} 
    		set{ 
    			if(m_SubjectsClassName != value){
    				m_SubjectsClassName = value; 
    				NotifyPropertyChanged("SubjectsClassName"); 
                }
    		} 
    	}
    	[DataMember]
        public System.DateTime FromDate {
    		get{ 
    			return m_FromDate;
    		} 
    		set{ 
    			if(m_FromDate != value){
    				m_FromDate = value; 
    				NotifyPropertyChanged("FromDate"); 
                }
    		} 
    	}
    	[DataMember]
        public System.DateTime ToDate {
    		get{ 
    			return m_ToDate;
    		} 
    		set{ 
    			if(m_ToDate != value){
    				m_ToDate = value; 
    				NotifyPropertyChanged("ToDate"); 
                }
    		} 
    	}
    	[DataMember]
        public int FK_TeacherIdMain {
    		get{ 
    			return m_FK_TeacherIdMain;
    		} 
    		set{ 
    			if(m_FK_TeacherIdMain != value){
    				m_FK_TeacherIdMain = value; 
    				NotifyPropertyChanged("FK_TeacherIdMain"); 
                }
    		} 
    	}
    	[DataMember]
        public int FK_TeacherIdSubject {
    		get{ 
    			return m_FK_TeacherIdSubject;
    		} 
    		set{ 
    			if(m_FK_TeacherIdSubject != value){
    				m_FK_TeacherIdSubject = value; 
    				NotifyPropertyChanged("FK_TeacherIdSubject"); 
                }
    		} 
    	}
    	[DataMember]
        public string Partner {
    		get{ 
    			return m_Partner;
    		} 
    		set{ 
    			if(m_Partner != value){
    				m_Partner = value; 
    				NotifyPropertyChanged("Partner"); 
                }
    		} 
    	}
    	[DataMember]
        public int ContractValue {
    		get{ 
    			return m_ContractValue;
    		} 
    		set{ 
    			if(m_ContractValue != value){
    				m_ContractValue = value; 
    				NotifyPropertyChanged("ContractValue"); 
                }
    		} 
    	}
    	[DataMember]
        public int FK_SubjectId {
    		get{ 
    			return m_FK_SubjectId;
    		} 
    		set{ 
    			if(m_FK_SubjectId != value){
    				m_FK_SubjectId = value; 
    				NotifyPropertyChanged("FK_SubjectId"); 
                }
    		} 
    	}
    	[DataMember]
        public bool IsDelete {
    		get{ 
    			return m_IsDelete;
    		} 
    		set{ 
    			if(m_IsDelete != value){
    				m_IsDelete = value; 
    				NotifyPropertyChanged("IsDelete"); 
                }
    		} 
    	}
    	[DataMember]
        public bool OpenOut {
    		get{ 
    			return m_OpenOut;
    		} 
    		set{ 
    			if(m_OpenOut != value){
    				m_OpenOut = value; 
    				NotifyPropertyChanged("OpenOut"); 
                }
    		} 
    	}
    	[DataMember]
        public int FK_DepartmentId {
    		get{ 
    			return m_FK_DepartmentId;
    		} 
    		set{ 
    			if(m_FK_DepartmentId != value){
    				m_FK_DepartmentId = value; 
    				NotifyPropertyChanged("FK_DepartmentId"); 
                }
    		} 
    	}
    
    	protected override void CopyFromEntity(BaseEntity source, BaseEntity dest){
    		((SubjectsClass)dest).SubjectsClassId = ((SubjectsClass)source).SubjectsClassId;
    		((SubjectsClass)dest).SubjectsClassNo = ((SubjectsClass)source).SubjectsClassNo;
    		((SubjectsClass)dest).SubjectsClassName = ((SubjectsClass)source).SubjectsClassName;
    		((SubjectsClass)dest).FromDate = ((SubjectsClass)source).FromDate;
    		((SubjectsClass)dest).ToDate = ((SubjectsClass)source).ToDate;
    		((SubjectsClass)dest).FK_TeacherIdMain = ((SubjectsClass)source).FK_TeacherIdMain;
    		((SubjectsClass)dest).FK_TeacherIdSubject = ((SubjectsClass)source).FK_TeacherIdSubject;
    		((SubjectsClass)dest).Partner = ((SubjectsClass)source).Partner;
    		((SubjectsClass)dest).ContractValue = ((SubjectsClass)source).ContractValue;
    		((SubjectsClass)dest).FK_SubjectId = ((SubjectsClass)source).FK_SubjectId;
    		((SubjectsClass)dest).IsDelete = ((SubjectsClass)source).IsDelete;
    		((SubjectsClass)dest).OpenOut = ((SubjectsClass)source).OpenOut;
    		((SubjectsClass)dest).FK_DepartmentId = ((SubjectsClass)source).FK_DepartmentId;
    	}
    
    
        public virtual Department Department { get; set; }
        public virtual Subject Subject { get; set; }
        public virtual Teacher Teacher { get; set; }
        public virtual Teacher Teacher1 { get; set; }
        public virtual ICollection<Student> Students { get; set; }
    }
}
