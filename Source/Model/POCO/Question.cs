//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Model.POCO
{
    using System.Runtime.Serialization;
    using System;
    using System.Collections.Generic;
    
    [DataContract]
    public partial class Question : BaseEntity
    {
        public Question()
        {
            this.Answers = new HashSet<Answer>();
            this.MultiTestQuestions = new HashSet<MultiTestQuestion>();
            this.StudentTestDetails = new HashSet<StudentTestDetail>();
            this.TestQuestions = new HashSet<TestQuestion>();
        }
    
    	private long m_QuestionId;
    	private string m_Content;
    	private int m_Level;
    	private int m_FK_SubjectId;
    	private int m_Type;
    	private string m_CreatedBy;
    	private string m_UpdatedBy;
    	private System.DateTime m_CreatedDate;
    	private System.DateTime m_UpdatedDate;
    	private double m_Time;
    	private int m_Purpose;
    	private bool m_IsDelete;
    	private System.Guid m_QuestionGuid;
    	private Nullable<bool> m_IsAnswerRandom;
        public long QuestionId {
    		get{ 
    			return m_QuestionId;
    		} 
    		set{ 
    			if(m_QuestionId != value){
    				m_QuestionId = value; 
    				NotifyPropertyChanged("QuestionId"); 
                }
    		} 
    	}
    	[DataMember]
        public string Content {
    		get{ 
    			return m_Content;
    		} 
    		set{ 
    			if(m_Content != value){
    				m_Content = value; 
    				NotifyPropertyChanged("Content"); 
                }
    		} 
    	}
    	[DataMember]
        public int Level {
    		get{ 
    			return m_Level;
    		} 
    		set{ 
    			if(m_Level != value){
    				m_Level = value; 
    				NotifyPropertyChanged("Level"); 
                }
    		} 
    	}
    	[DataMember]
        public int FK_SubjectId {
    		get{ 
    			return m_FK_SubjectId;
    		} 
    		set{ 
    			if(m_FK_SubjectId != value){
    				m_FK_SubjectId = value; 
    				NotifyPropertyChanged("FK_SubjectId"); 
                }
    		} 
    	}
    	[DataMember]
        public int Type {
    		get{ 
    			return m_Type;
    		} 
    		set{ 
    			if(m_Type != value){
    				m_Type = value; 
    				NotifyPropertyChanged("Type"); 
                }
    		} 
    	}
    	[DataMember]
        public string CreatedBy {
    		get{ 
    			return m_CreatedBy;
    		} 
    		set{ 
    			if(m_CreatedBy != value){
    				m_CreatedBy = value; 
    				NotifyPropertyChanged("CreatedBy"); 
                }
    		} 
    	}
    	[DataMember]
        public string UpdatedBy {
    		get{ 
    			return m_UpdatedBy;
    		} 
    		set{ 
    			if(m_UpdatedBy != value){
    				m_UpdatedBy = value; 
    				NotifyPropertyChanged("UpdatedBy"); 
                }
    		} 
    	}
    	[DataMember]
        public System.DateTime CreatedDate {
    		get{ 
    			return m_CreatedDate;
    		} 
    		set{ 
    			if(m_CreatedDate != value){
    				m_CreatedDate = value; 
    				NotifyPropertyChanged("CreatedDate"); 
                }
    		} 
    	}
    	[DataMember]
        public System.DateTime UpdatedDate {
    		get{ 
    			return m_UpdatedDate;
    		} 
    		set{ 
    			if(m_UpdatedDate != value){
    				m_UpdatedDate = value; 
    				NotifyPropertyChanged("UpdatedDate"); 
                }
    		} 
    	}
    	[DataMember]
        public double Time {
    		get{ 
    			return m_Time;
    		} 
    		set{ 
    			if(m_Time != value){
    				m_Time = value; 
    				NotifyPropertyChanged("Time"); 
                }
    		} 
    	}
    	[DataMember]
        public int Purpose {
    		get{ 
    			return m_Purpose;
    		} 
    		set{ 
    			if(m_Purpose != value){
    				m_Purpose = value; 
    				NotifyPropertyChanged("Purpose"); 
                }
    		} 
    	}
    	[DataMember]
        public bool IsDelete {
    		get{ 
    			return m_IsDelete;
    		} 
    		set{ 
    			if(m_IsDelete != value){
    				m_IsDelete = value; 
    				NotifyPropertyChanged("IsDelete"); 
                }
    		} 
    	}
    	[DataMember]
        public System.Guid QuestionGuid {
    		get{ 
    			return m_QuestionGuid;
    		} 
    		set{ 
    			if(m_QuestionGuid != value){
    				m_QuestionGuid = value; 
    				NotifyPropertyChanged("QuestionGuid"); 
                }
    		} 
    	}
    	[DataMember]
        public Nullable<bool> IsAnswerRandom {
    		get{ 
    			return m_IsAnswerRandom;
    		} 
    		set{ 
    			if(m_IsAnswerRandom != value){
    				m_IsAnswerRandom = value; 
    				NotifyPropertyChanged("IsAnswerRandom"); 
                }
    		} 
    	}
    
    	protected override void CopyFromEntity(BaseEntity source, BaseEntity dest){
    		((Question)dest).QuestionId = ((Question)source).QuestionId;
    		((Question)dest).Content = ((Question)source).Content;
    		((Question)dest).Level = ((Question)source).Level;
    		((Question)dest).FK_SubjectId = ((Question)source).FK_SubjectId;
    		((Question)dest).Type = ((Question)source).Type;
    		((Question)dest).CreatedBy = ((Question)source).CreatedBy;
    		((Question)dest).UpdatedBy = ((Question)source).UpdatedBy;
    		((Question)dest).CreatedDate = ((Question)source).CreatedDate;
    		((Question)dest).UpdatedDate = ((Question)source).UpdatedDate;
    		((Question)dest).Time = ((Question)source).Time;
    		((Question)dest).Purpose = ((Question)source).Purpose;
    		((Question)dest).IsDelete = ((Question)source).IsDelete;
    		((Question)dest).QuestionGuid = ((Question)source).QuestionGuid;
    		((Question)dest).IsAnswerRandom = ((Question)source).IsAnswerRandom;
    	}
    
    
        public virtual ICollection<Answer> Answers { get; set; }
        public virtual ICollection<MultiTestQuestion> MultiTestQuestions { get; set; }
        public virtual Subject Subject { get; set; }
        public virtual ICollection<StudentTestDetail> StudentTestDetails { get; set; }
        public virtual ICollection<TestQuestion> TestQuestions { get; set; }
    }
}
